{"ast":null,"code":"var _jsxFileName = \"/Users/jordanbruner/Desktop/Projects/EmptyStillsFront/emptysills/src/Sills/index.js\";\nimport React, { Component, Fragment } from 'react'; //import {Button} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom';\nimport NavBar from '../Nav';\nimport PlantModule from '../PlantModule';\nimport SillsList from '../SillsList';\n\nclass Sills extends Component {\n  constructor() {\n    super();\n\n    this.getUser = async () => {\n      try {\n        const userId = localStorage.getItem('sessionUserId');\n        const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n          credentials: 'include',\n          method: \"GET\"\n        });\n      } catch (err) {\n        this.props.history.push('/');\n      }\n    };\n\n    this.currentPlants = async () => {\n      try {\n        await this.setState({\n          plantData: [],\n          plants: []\n        });\n        const searchedPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/`, {\n          method: \"GET\",\n          credentials: 'include'\n        });\n        console.log(searchedPlant, \"1\");\n        const parsedPlants = await searchedPlant.json();\n        console.log(parsedPlants.data, \"2\");\n        console.log(this.state.plants, \"3\");\n        console.log(parsedPlants.data.length);\n\n        for (let i = 0; i < parsedPlants.data.length; i++) {\n          console.log(parsedPlants.data[i], \"4\");\n          console.log(parsedPlants.data[i].user.id, \"5\");\n\n          if (parsedPlants.data[i].user.id.toString() === localStorage.getItem('sessionUserId').toString()) {\n            console.lod(\"6\");\n            await this.setState({\n              plantData: [...this.state.plantData, parsedPlants.data[i]]\n            });\n            console.log(this.state.plantData, '7');\n            console.log(this.state.parsedPlants.data[i], \"8\");\n            const quedPlants = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/search/`, {\n              method: \"POST\",\n              body: JSON.stringify(this.state.parsedPlants.data[i].id),\n              credentials: 'include',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            console.log(quedPlants);\n            await this.setState({\n              plants: [...this.state.plants, quedPlants]\n            });\n            console.log(this.state.plants);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n        this.props.history.push('/');\n      }\n    };\n\n    this.removePlant = async id => {\n      const deletePlantResponse = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/${id}/`, {\n        method: 'DELETE',\n        credentials: 'include'\n      });\n      const deletePlantParsed = await deletePlantResponse.json();\n      this.setState({\n        plants: this.state.plants.filter(plants => plants.id !== id)\n      });\n    };\n\n    this.openPlantModal = async plant => {\n      await this.setState({\n        viewPlants: true,\n        plantViewed: plant\n      });\n    };\n\n    this.closeModal = async () => {\n      await this.setState({\n        viewPlant: false\n      });\n    };\n\n    this.state = {\n      plants: [],\n      plantData: [],\n      viewPlants: false,\n      companionViewed: []\n    };\n  }\n\n  componentDidMount() {\n    this.getUser();\n    this.currentPlants();\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(SillsList, {\n      searchedPlant: this.state.plants,\n      removePlant: this.removePlant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Sills;","map":{"version":3,"sources":["/Users/jordanbruner/Desktop/Projects/EmptyStillsFront/emptysills/src/Sills/index.js"],"names":["React","Component","Fragment","Link","NavBar","PlantModule","SillsList","Sills","constructor","getUser","userId","localStorage","getItem","user","fetch","process","env","REACT_APP_API_URL","credentials","method","err","props","history","push","currentPlants","setState","plantData","plants","searchedPlant","console","log","parsedPlants","json","data","state","length","i","id","toString","lod","quedPlants","body","JSON","stringify","headers","removePlant","deletePlantResponse","deletePlantParsed","filter","openPlantModal","plant","viewPlants","plantViewed","closeModal","viewPlant","companionViewed","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\n//import {Button} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport NavBar from '../Nav';\nimport PlantModule from '../PlantModule';\nimport SillsList from '../SillsList'\n\nclass Sills extends Component{\n    constructor(){\n        super();\n        this.state = {\n            plants: [],\n            plantData: [],\n            viewPlants: false,\n            companionViewed: []\n        }\n    }\n    componentDidMount(){\n        this.getUser();\n        this.currentPlants();\n    }\n    getUser = async () => {\n        try{\n            const userId = localStorage.getItem('sessionUserId');\n            const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n                credentials: 'include',\n                method: \"GET\"\n            })\n\n        } catch(err){\n            this.props.history.push('/')\n        }\n    }\n    currentPlants = async () => {\n        try{\n            await this.setState({\n                plantData: [],\n                plants: []\n            })\n            const searchedPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/`, {\n                method: \"GET\",\n                credentials: 'include'\n            });\n            console.log(searchedPlant, \"1\")\n            const parsedPlants = await searchedPlant.json()\n            console.log(parsedPlants.data, \"2\")\n            console.log(this.state.plants, \"3\")\n            console.log(parsedPlants.data.length)\n            for(let i=0; i<parsedPlants.data.length; i++){\n                console.log(parsedPlants.data[i],\"4\")\n                console.log(parsedPlants.data[i].user.id, \"5\")\n                if(parsedPlants.data[i].user.id.toString() === localStorage.getItem('sessionUserId').toString()){\n                    console.lod(\"6\")\n                    await this.setState({\n                        plantData: [...this.state.plantData, parsedPlants.data[i]]\n                    })\n                        console.log(this.state.plantData, '7')\n                        console.log(this.state.parsedPlants.data[i], \"8\")\n                    const quedPlants = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/search/`, {\n                        method: \"POST\",\n                        body: JSON.stringify(this.state.parsedPlants.data[i].id),\n                        credentials: 'include',\n                        headers: {\n                        'Content-Type': 'application/json'}\n                     })\n                    console.log(quedPlants)\n                    await this.setState({\n                         plants: [...this.state.plants, quedPlants]\n                    })\n                    console.log(this.state.plants)\n                }\n            }\n\n\n\n        } catch(err){\n            console.log(err)\n            this.props.history.push('/')\n        }\n    }\n    removePlant = async (id) => {\n        const deletePlantResponse = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/${id}/`, {\n            method: 'DELETE',\n            credentials: 'include'\n        })\n        const deletePlantParsed = await deletePlantResponse.json()\n        this.setState({plants: this.state.plants.filter((plants) => plants.id !== id )})\n    }\n    openPlantModal = async (plant) => {\n        await this.setState({\n            viewPlants: true,\n            plantViewed: plant\n        })\n    }\n    closeModal = async () => {\n        await this.setState({\n            viewPlant: false\n        })\n    }\n    render(){\n        return(\n            <Fragment>\n                <NavBar />\n                <SillsList searchedPlant={this.state.plants} removePlant={this.removePlant}/>\n            </Fragment>\n        )\n    }\n}\n\nexport default Sills;"]},"metadata":{},"sourceType":"module"}