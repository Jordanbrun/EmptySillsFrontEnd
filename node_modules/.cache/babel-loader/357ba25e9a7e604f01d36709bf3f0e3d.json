{"ast":null,"code":"var _jsxFileName = \"/Users/jordanbruner/Desktop/Projects/EmptySillsFrontEnd/src/SearchBar/index.js\";\nimport React, { Component } from 'react';\nimport { Button, Dimmer, Input, Segment, Loader, Container, Divider } from 'semantic-ui-react';\nimport NavBar from '../Nav';\nimport axios from 'axios';\nimport PlantList from '../PlantList';\n\nclass Search extends Component {\n  constructor() {\n    super();\n\n    this.searchButton = async () => {\n      try {\n        this.setState({\n          plants: [],\n          loader: true\n        });\n        const searchPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/search/`, {\n          method: \"POST\",\n          body: JSON.stringify(this.state),\n          credentials: 'include',\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n          }\n        });\n        const parsedPlant = await searchPlant.json();\n        console.log(parsedPlant);\n\n        for (let i = 0; i < parsedPlant.length; i++) {\n          this.setState({\n            plants: [...this.state.plants, parsedPlant[i]]\n          });\n        }\n\n        this.setState({\n          loader: false\n        });\n      } catch (err) {\n        this.setState({\n          loader: false\n        });\n        console.log(err, \"error in searchBar\");\n      }\n    };\n\n    this.updateValue = e => {\n      this.setState({\n        [e.currentTarget.name]: e.currentTarget.value\n      });\n    };\n\n    this.addPlant = async id => {\n      try {\n        console.log(id);\n        await this.setState({\n          submitPlant: {\n            plant_id: id\n          }\n        });\n        console.log(this.state.submitPlant);\n        const plantUrl = `${process.env.REACT_APP_API_URL}/api/v1/plants/`;\n        const plantResponce = await fetch(plantUrl, {\n          method: \"POST\",\n          credentials: 'include',\n          body: JSON.stringify(this.state.submitPlant),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(this.state.submitPlant);\n        this.setState({\n          plant_id: 0\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      currentUser: JSON.parse(localStorage.getItem('currentUser')) || {},\n      loader: false,\n      plants: [],\n      userInput: \"\",\n      submitPlant: {\n        plant_id: 0,\n        user: 0\n      }\n    };\n  } // componentDidMount(){\n  //     this.getUser();\n  // }\n  // getUser = async () => {\n  //     try{\n  //         const userId = localStorage.getItem('sessionUserId');\n  //         const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n  //             credentials: 'include',\n  //             method: \"GET\"\n  //         })\n  //         const parsedUser = await user.json()\n  //          console.log(\"currentUser:\", parsedUser);\n  //         this.setState({\n  //             currentUser: parsedUser\n  //         })\n  //     } catch(err){\n  //         console.log(err);\n  //         this.props.history.push('/')\n  //     }\n  // }\n\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Container, {\n      text: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Input, {\n      icon: \"leaf\",\n      onChange: this.updateValue,\n      name: \"userInput\",\n      iconPosition: \"left\",\n      value: this.state.userInput,\n      placeholder: \"Search plants...\",\n      centered: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"green\",\n      onClick: this.searchButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Search\"), React.createElement(Divider, {\n      hidden: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(Dimmer, {\n      active: this.state.loader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      active: this.state.loader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), React.createElement(PlantList, {\n      searchedPlant: this.state.plants,\n      addPlant: this.addPlant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Search; //  <input\n//type=\"text\"\n//value={this.state.userInput}\n//onChange={this.updateValue}\n// />","map":{"version":3,"sources":["/Users/jordanbruner/Desktop/Projects/EmptySillsFrontEnd/src/SearchBar/index.js"],"names":["React","Component","Button","Dimmer","Input","Segment","Loader","Container","Divider","NavBar","axios","PlantList","Search","constructor","searchButton","setState","plants","loader","searchPlant","fetch","process","env","REACT_APP_API_URL","method","body","JSON","stringify","state","credentials","headers","parsedPlant","json","console","log","i","length","err","updateValue","e","currentTarget","name","value","addPlant","id","submitPlant","plant_id","plantUrl","plantResponce","currentUser","parse","localStorage","getItem","userInput","user","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Button, Dimmer, Input, Segment, Loader, Container, Divider } from 'semantic-ui-react'\nimport NavBar from '../Nav';\nimport axios from 'axios'\nimport PlantList from '../PlantList'\n\nclass Search extends Component{\n    constructor(){\n        super();\n        this.state = {\n            currentUser: JSON.parse(localStorage.getItem('currentUser')) || {},\n            loader: false,\n            plants: [],\n            userInput:\"\",\n            submitPlant: {\n                plant_id: 0,\n                user: 0\n            }\n        }\n    }\n    // componentDidMount(){\n    //     this.getUser();\n    // }\n    // getUser = async () => {\n    //     try{\n    //         const userId = localStorage.getItem('sessionUserId');\n    //         const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n    //             credentials: 'include',\n    //             method: \"GET\"\n    //         })\n\n    //         const parsedUser = await user.json()\n    //          console.log(\"currentUser:\", parsedUser);\n    //         this.setState({\n    //             currentUser: parsedUser\n    //         })\n\n    //     } catch(err){\n    //         console.log(err);\n    //         this.props.history.push('/')\n    //     }\n    // }\n    searchButton = async () => {\n        try {\n            this.setState({\n                plants: [],\n                loader: true\n            })\n\n            const searchPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/search/`, {\n            method: \"POST\",\n            body: JSON.stringify(this.state),\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*' }\n            })\n\n            const parsedPlant = await searchPlant.json();\n            console.log(parsedPlant);\n\n            for(let i=0; i<parsedPlant.length; i++){\n            this.setState({\n            plants: [...this.state.plants, parsedPlant[i]]\n                })\n            }\n\n            this.setState({\n                loader: false\n             })\n        } catch(err){\n            this.setState({\n                loader: false\n            })\n            console.log(err, \"error in searchBar\")\n        }\n    }\n    updateValue = (e) => {\n            this.setState({\n            [e.currentTarget.name]: e.currentTarget.value\n        })\n    }\n    addPlant = async (id) => {\n        try {\n            console.log(id)\n                await this.setState({\n                    submitPlant: {plant_id: id}\n                })\n            console.log(this.state.submitPlant)\n            const plantUrl = `${process.env.REACT_APP_API_URL}/api/v1/plants/`;\n            const plantResponce = await fetch(plantUrl, {\n                method: \"POST\",\n                credentials: 'include',\n                body: JSON.stringify(this.state.submitPlant),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log(this.state.submitPlant)\n            this.setState({\n                plant_id: 0\n            })\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    render(){\n        return(\n            <React.Fragment>\n            <NavBar/>\n            <Container text>\n                    <Input icon='leaf' onChange={this.updateValue} name=\"userInput\" iconPosition='left' value={this.state.userInput} placeholder='Search plants...' centered='true' />\n                    <Button color=\"green\" onClick={this.searchButton}>Search</Button>\n                    <Divider hidden='true'/>\n                    <Dimmer active={this.state.loader}>\n                        <Loader active={this.state.loader}/>\n                    </Dimmer>\n                    <PlantList searchedPlant={this.state.plants} addPlant={this.addPlant}/>\n            </Container>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Search;\n\n//  <input\n                    //type=\"text\"\n                    //value={this.state.userInput}\n                    //onChange={this.updateValue}\n                 // />"]},"metadata":{},"sourceType":"module"}