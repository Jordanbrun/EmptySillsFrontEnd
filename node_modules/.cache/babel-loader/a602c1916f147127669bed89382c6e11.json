{"ast":null,"code":"var _jsxFileName = \"/Users/jordanbruner/Desktop/Projects/EmptyStillsFront/emptysills/src/Sills/index.js\";\nimport React, { Component, Fragment } from 'react'; //import {Button} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom';\nimport NavBar from '../Nav';\nimport PlantModule from '../PlantModule';\nimport SillsList from '../SillsList';\n\nclass Sills extends Component {\n  constructor() {\n    super();\n\n    this.getUser = async () => {\n      try {\n        const userId = localStorage.getItem('sessionUserId');\n        const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n          credentials: 'include',\n          method: \"GET\"\n        });\n      } catch (err) {\n        this.props.history.push('/');\n      }\n    };\n\n    this.currentPlants = async () => {\n      try {\n        await this.setState({\n          plantData: [],\n          plants: []\n        });\n        const searchedPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/`, {\n          method: \"GET\",\n          credentials: 'include'\n        });\n        console.log(searchedPlant, \"1\");\n        const parsedPlants = await searchedPlant.json();\n        console.log(parsedPlants.data, \"2\");\n        console.log(this.state.plants, \"3\");\n        console.log(parsedPlants.data.length);\n\n        for (let i = 0; i < parsedPlants.data.length; i++) {\n          console.log(parsedPlants.data[i], \"4\");\n          console.log(parsedPlants.data[i].user.id, \"5\");\n\n          if (parsedPlants.data[i].user.id.toString() === localStorage.getItem('sessionUserId').toString()) {\n            console.log(\"6\");\n            await this.setState({\n              plantData: [...this.state.plantData, parsedPlants.data[i]]\n            });\n            console.log(this.state.plantData, '7');\n            console.log(this.state.plantData[i], \"8\");\n            console.log(this.state.plantData[i].plant_id, \"9\"); //console.log(this.state.parsedPlants.data[i], \"8\")\n\n            const quedPlants = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/sill/`, {\n              method: \"POST\",\n              body: JSON.stringify(this.state.plantData[i].plant_id),\n              credentials: 'include',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            const allPlantData = await quedPlants.json();\n            console.log(quedPlants);\n            await this.setState({\n              plants: [...this.state.plants, allPlantData]\n            });\n            console.log(this.state.plants);\n            console.log(this.state.plantData);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n        this.props.history.push('/');\n      }\n    };\n\n    this.removePlant = async id => {\n      const deletePlantResponse = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/${id}/`, {\n        method: 'DELETE',\n        credentials: 'include'\n      });\n      const deletePlantParsed = await deletePlantResponse.json();\n      this.setState({\n        plants: this.state.plants.filter(plants => plants.id !== id)\n      });\n    };\n\n    this.waterPlant = async plantWatered => {\n      try {\n        console.log(plantWatered);\n        const editResponce = await fetch(process.env.REACT_APP_API_URL + `/api/v1/plants/${plantWatered}/`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const editResponseParsed = await editResponce.json();\n        console.log('editResponseParsed: ', editResponseParsed);\n        const plantArr = this.state.plantData.map(plant => {\n          if (plant.id === editResponseParsed.data.id) {\n            plant = editResponseParsed.data;\n          }\n\n          return plant;\n        });\n        this.setState({\n          plantData: plantArr\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      plants: [],\n      plantData: [],\n      viewPlants: false,\n      companionViewed: [],\n      editPlant: []\n    };\n  }\n\n  componentDidMount() {\n    this.getUser();\n    this.currentPlants();\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(SillsList, {\n      searchedPlant: this.state.plants,\n      plantId: this.state.plantData,\n      waterPlant: this.waterPlant,\n      removePlant: this.removePlant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Sills;","map":{"version":3,"sources":["/Users/jordanbruner/Desktop/Projects/EmptyStillsFront/emptysills/src/Sills/index.js"],"names":["React","Component","Fragment","Link","NavBar","PlantModule","SillsList","Sills","constructor","getUser","userId","localStorage","getItem","user","fetch","process","env","REACT_APP_API_URL","credentials","method","err","props","history","push","currentPlants","setState","plantData","plants","searchedPlant","console","log","parsedPlants","json","data","state","length","i","id","toString","plant_id","quedPlants","body","JSON","stringify","headers","allPlantData","removePlant","deletePlantResponse","deletePlantParsed","filter","waterPlant","plantWatered","editResponce","editResponseParsed","plantArr","map","plant","viewPlants","companionViewed","editPlant","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\n//import {Button} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport NavBar from '../Nav';\nimport PlantModule from '../PlantModule';\nimport SillsList from '../SillsList'\n\nclass Sills extends Component{\n    constructor(){\n        super();\n        this.state = {\n            plants: [],\n            plantData: [],\n            viewPlants: false,\n            companionViewed: [],\n            editPlant: []\n        }\n    }\n    componentDidMount(){\n        this.getUser();\n        this.currentPlants();\n    }\n    getUser = async () => {\n        try{\n            const userId = localStorage.getItem('sessionUserId');\n            const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n                credentials: 'include',\n                method: \"GET\"\n            })\n\n        } catch(err){\n            this.props.history.push('/')\n        }\n    }\n    currentPlants = async () => {\n        try{\n            await this.setState({\n                plantData: [],\n                plants: []\n            })\n            const searchedPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/`, {\n                method: \"GET\",\n                credentials: 'include'\n            });\n            console.log(searchedPlant, \"1\")\n            const parsedPlants = await searchedPlant.json()\n            console.log(parsedPlants.data, \"2\")\n            console.log(this.state.plants, \"3\")\n            console.log(parsedPlants.data.length)\n            for(let i=0; i<parsedPlants.data.length; i++){\n                console.log(parsedPlants.data[i],\"4\")\n                console.log(parsedPlants.data[i].user.id, \"5\")\n                if(parsedPlants.data[i].user.id.toString() === localStorage.getItem('sessionUserId').toString()){\n                    console.log(\"6\")\n                    await this.setState({\n                        plantData: [...this.state.plantData, parsedPlants.data[i]]\n                    })\n                        console.log(this.state.plantData, '7')\n                        console.log(this.state.plantData[i],\"8\")\n                        console.log(this.state.plantData[i].plant_id,\"9\")\n                        //console.log(this.state.parsedPlants.data[i], \"8\")\n                    const quedPlants = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/sill/`, {\n                        method: \"POST\",\n                        body: JSON.stringify(this.state.plantData[i].plant_id),\n                        credentials: 'include',\n                        headers: {\n                        'Content-Type': 'application/json'}\n                     })\n                    const allPlantData = await quedPlants.json()\n                    console.log(quedPlants)\n                    await this.setState({\n                         plants: [...this.state.plants, allPlantData]\n                    })\n                    console.log(this.state.plants)\n                    console.log(this.state.plantData)\n                }\n            }\n\n\n\n        } catch(err){\n            console.log(err)\n            this.props.history.push('/')\n        }\n    }\n    removePlant = async (id) => {\n        const deletePlantResponse = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/${id}/`, {\n            method: 'DELETE',\n            credentials: 'include'\n        })\n        const deletePlantParsed = await deletePlantResponse.json()\n        this.setState({plants: this.state.plants.filter((plants) => plants.id !== id )})\n    }\n    // openPlantModal = async (plant) => {\n    //     await this.setState({\n    //         viewPlants: true,\n    //         plantViewed: plant\n    //     })\n    // }\n    // closeModal = async () => {\n    //     await this.setState({\n    //         viewPlant: false\n    //     })\n    // }\n    waterPlant = async(plantWatered) => {\n         try {\n\n            console.log(plantWatered)\n\n             const editResponce = await fetch (process.env.REACT_APP_API_URL + `/api/v1/plants/${plantWatered}/`, {\n             method: 'PUT',\n             headers: {\n              'Content-Type' : 'application/json'\n            }\n          });\n\n          const editResponseParsed = await editResponce.json();\n          console.log('editResponseParsed: ', editResponseParsed)\n\n\n          const plantArr = this.state.plantData.map((plant) => {\n            if(plant.id === editResponseParsed.data.id) {\n              plant = editResponseParsed.data\n            }\n            return plant;\n          })\n\n          this.setState({\n            plantData: plantArr\n          })\n\n        } catch (err) {\n          console.log(err);\n        }\n    }\n    render(){\n        return(\n            <Fragment>\n                <NavBar />\n                <SillsList searchedPlant={this.state.plants} plantId={this.state.plantData} waterPlant={this.waterPlant} removePlant={this.removePlant}/>\n            </Fragment>\n        )\n    }\n}\n\nexport default Sills;"]},"metadata":{},"sourceType":"module"}