{"ast":null,"code":"var _jsxFileName = \"/Users/jordanbruner/Desktop/Projects/EmptyStillsFront/emptysills/src/Sills/index.js\";\nimport React, { Component, Fragment } from 'react'; //import {Button} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom';\nimport NavBar from '../Nav';\nimport PlantModule from '../PlantModule';\nimport SillsList from '../SillsList';\n\nclass Sills extends Component {\n  constructor() {\n    super();\n\n    this.currentPlants = async () => {\n      try {\n        await this.setState({\n          plantData: [],\n          plants: []\n        });\n        const searchedPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/`, {\n          method: \"GET\",\n          credentials: 'include'\n        });\n        console.log(searchedPlant, \"1\");\n        const parsedPlants = await searchedPlant.json();\n        console.log(parsedPlants.data, \"2\");\n        console.log(this.state.plants, \"3\");\n        console.log(parsedPlants.data.length);\n\n        for (let i = 0; i < parsedPlants.length; i++) {\n          console.log(\"in the for loop\");\n\n          if (parsedPlants[i].user.id.toString() === localStorage.getItem('sessionUserId').toString()) {\n            await this.setState({\n              plantData: [...this.state.plantData, parsedPlants[i].data]\n            });\n            console.log(this.state.plantData, '4');\n            const quedPlants = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/search/`, {\n              method: \"POST\",\n              body: JSON.stringify(this.state.parsedPlants[i].data.id),\n              credentials: 'include',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            console.log(quedPlants);\n            await this.setState({\n              plants: [...this.state.plants, quedPlants]\n            });\n            console.log(this.state.plants);\n          }\n        }\n      } catch (err) {\n        // console.log(err)\n        this.props.history.push('/');\n      }\n    };\n\n    this.removePlant = async id => {\n      const deletePlantResponse = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/${id}/`, {\n        method: 'DELETE',\n        credentials: 'include'\n      });\n      const deletePlantParsed = await deletePlantResponse.json();\n      this.setState({\n        plants: this.state.plants.filter(plants => plants.id !== id)\n      });\n    };\n\n    this.openPlantModal = async plant => {\n      await this.setState({\n        viewPlants: true,\n        plantViewed: plant\n      });\n    };\n\n    this.closeModal = async () => {\n      await this.setState({\n        viewPlant: false\n      });\n    };\n\n    this.state = {\n      plants: [],\n      plantData: [],\n      viewPlants: false,\n      companionViewed: []\n    };\n  }\n\n  componentDidMount() {\n    this.currentPlants();\n  } // getUser = async () => {\n  //     try{\n  //         // console.log(\"get user function\");\n  //         const userId = localStorage.getItem('sessionUserId');\n  //         const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n  //             credentials: 'include',\n  //             method: \"GET\"\n  //         })\n  //         const parsedUser = await user.json()\n  //         // console.log(\"currentUser:\", parsedUser);\n  //         this.setState({\n  //             gold: parsedUser.gold\n  //         })\n  //     } catch(err){\n  //         // console.log(err);\n  //         this.props.history.push('/')\n  //     }\n  // }\n\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(SillsList, {\n      searchedPlant: this.state.plants,\n      removePlant: this.removePlant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Sills;","map":{"version":3,"sources":["/Users/jordanbruner/Desktop/Projects/EmptyStillsFront/emptysills/src/Sills/index.js"],"names":["React","Component","Fragment","Link","NavBar","PlantModule","SillsList","Sills","constructor","currentPlants","setState","plantData","plants","searchedPlant","fetch","process","env","REACT_APP_API_URL","method","credentials","console","log","parsedPlants","json","data","state","length","i","user","id","toString","localStorage","getItem","quedPlants","body","JSON","stringify","headers","err","props","history","push","removePlant","deletePlantResponse","deletePlantParsed","filter","openPlantModal","plant","viewPlants","plantViewed","closeModal","viewPlant","companionViewed","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CACA;;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;AAEA,MAAMC,KAAN,SAAoBN,SAApB,CAA6B;AACzBO,EAAAA,WAAW,GAAE;AACT;;AADS,SAgCbC,aAhCa,GAgCG,YAAY;AACxB,UAAG;AACC,cAAM,KAAKC,QAAL,CAAc;AAChBC,UAAAA,SAAS,EAAE,EADK;AAEhBC,UAAAA,MAAM,EAAE;AAFQ,SAAd,CAAN;AAIA,cAAMC,aAAa,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,iBAAlC,EAAoD;AACjFC,UAAAA,MAAM,EAAE,KADyE;AAEjFC,UAAAA,WAAW,EAAE;AAFoE,SAApD,CAAjC;AAIAC,QAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ,EAA2B,GAA3B;AACA,cAAMS,YAAY,GAAG,MAAMT,aAAa,CAACU,IAAd,EAA3B;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYC,YAAY,CAACE,IAAzB,EAA+B,GAA/B;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKI,KAAL,CAAWb,MAAvB,EAA+B,GAA/B;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYC,YAAY,CAACE,IAAb,CAAkBE,MAA9B;;AACA,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,YAAY,CAACI,MAA5B,EAAoCC,CAAC,EAArC,EAAwC;AACpCP,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;;AACA,cAAGC,YAAY,CAACK,CAAD,CAAZ,CAAgBC,IAAhB,CAAqBC,EAArB,CAAwBC,QAAxB,OAAuCC,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCF,QAAtC,EAA1C,EAA2F;AACvF,kBAAM,KAAKpB,QAAL,CAAc;AAChBC,cAAAA,SAAS,EAAE,CAAC,GAAG,KAAKc,KAAL,CAAWd,SAAf,EAA0BW,YAAY,CAACK,CAAD,CAAZ,CAAgBH,IAA1C;AADK,aAAd,CAAN;AAGIJ,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAKI,KAAL,CAAWd,SAAvB,EAAkC,GAAlC;AACJ,kBAAMsB,UAAU,GAAG,MAAMnB,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,wBAAlC,EAA2D;AACrFC,cAAAA,MAAM,EAAE,MAD6E;AAErFgB,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAKX,KAAL,CAAWH,YAAX,CAAwBK,CAAxB,EAA2BH,IAA3B,CAAgCK,EAA/C,CAF+E;AAGrFV,cAAAA,WAAW,EAAE,SAHwE;AAIrFkB,cAAAA,OAAO,EAAE;AACT,gCAAgB;AADP;AAJ4E,aAA3D,CAA9B;AAOAjB,YAAAA,OAAO,CAACC,GAAR,CAAYY,UAAZ;AACA,kBAAM,KAAKvB,QAAL,CAAc;AACfE,cAAAA,MAAM,EAAE,CAAC,GAAG,KAAKa,KAAL,CAAWb,MAAf,EAAuBqB,UAAvB;AADO,aAAd,CAAN;AAGAb,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAKI,KAAL,CAAWb,MAAvB;AACH;AACJ;AAIJ,OAtCD,CAsCE,OAAM0B,GAAN,EAAU;AACR;AACA,aAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH;AACJ,KA3EY;;AAAA,SA4EbC,WA5Ea,GA4EC,MAAOb,EAAP,IAAc;AACxB,YAAMc,mBAAmB,GAAG,MAAM7B,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,kBAAiBY,EAAG,GAAtD,EAA0D;AAC7FX,QAAAA,MAAM,EAAE,QADqF;AAE7FC,QAAAA,WAAW,EAAE;AAFgF,OAA1D,CAAvC;AAIA,YAAMyB,iBAAiB,GAAG,MAAMD,mBAAmB,CAACpB,IAApB,EAAhC;AACA,WAAKb,QAAL,CAAc;AAACE,QAAAA,MAAM,EAAE,KAAKa,KAAL,CAAWb,MAAX,CAAkBiC,MAAlB,CAA0BjC,MAAD,IAAYA,MAAM,CAACiB,EAAP,KAAcA,EAAnD;AAAT,OAAd;AACH,KAnFY;;AAAA,SAoFbiB,cApFa,GAoFI,MAAOC,KAAP,IAAiB;AAC9B,YAAM,KAAKrC,QAAL,CAAc;AAChBsC,QAAAA,UAAU,EAAE,IADI;AAEhBC,QAAAA,WAAW,EAAEF;AAFG,OAAd,CAAN;AAIH,KAzFY;;AAAA,SA0FbG,UA1Fa,GA0FA,YAAY;AACrB,YAAM,KAAKxC,QAAL,CAAc;AAChByC,QAAAA,SAAS,EAAE;AADK,OAAd,CAAN;AAGH,KA9FY;;AAET,SAAK1B,KAAL,GAAa;AACTb,MAAAA,MAAM,EAAE,EADC;AAETD,MAAAA,SAAS,EAAE,EAFF;AAGTqC,MAAAA,UAAU,EAAE,KAHH;AAITI,MAAAA,eAAe,EAAE;AAJR,KAAb;AAMH;;AACDC,EAAAA,iBAAiB,GAAE;AACf,SAAK5C,aAAL;AACH,GAZwB,CAazB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAgEA6C,EAAAA,MAAM,GAAE;AACJ,WACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,SAAD;AAAW,MAAA,aAAa,EAAE,KAAK7B,KAAL,CAAWb,MAArC;AAA6C,MAAA,WAAW,EAAE,KAAK8B,WAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AAvGwB;;AA0G7B,eAAenC,KAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\n//import {Button} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport NavBar from '../Nav';\nimport PlantModule from '../PlantModule';\nimport SillsList from '../SillsList'\n\nclass Sills extends Component{\n    constructor(){\n        super();\n        this.state = {\n            plants: [],\n            plantData: [],\n            viewPlants: false,\n            companionViewed: []\n        }\n    }\n    componentDidMount(){\n        this.currentPlants();\n    }\n    // getUser = async () => {\n    //     try{\n    //         // console.log(\"get user function\");\n    //         const userId = localStorage.getItem('sessionUserId');\n    //         const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n    //             credentials: 'include',\n    //             method: \"GET\"\n    //         })\n\n    //         const parsedUser = await user.json()\n    //         // console.log(\"currentUser:\", parsedUser);\n    //         this.setState({\n    //             gold: parsedUser.gold\n    //         })\n\n    //     } catch(err){\n    //         // console.log(err);\n    //         this.props.history.push('/')\n    //     }\n    // }\n    currentPlants = async () => {\n        try{\n            await this.setState({\n                plantData: [],\n                plants: []\n            })\n            const searchedPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/`, {\n                method: \"GET\",\n                credentials: 'include'\n            });\n            console.log(searchedPlant, \"1\")\n            const parsedPlants = await searchedPlant.json()\n            console.log(parsedPlants.data, \"2\")\n            console.log(this.state.plants, \"3\")\n            console.log(parsedPlants.data.length)\n            for(let i=0; i<parsedPlants.length; i++){\n                console.log(\"in the for loop\")\n                if(parsedPlants[i].user.id.toString() === localStorage.getItem('sessionUserId').toString()){\n                    await this.setState({\n                        plantData: [...this.state.plantData, parsedPlants[i].data]\n                    })\n                        console.log(this.state.plantData, '4')\n                    const quedPlants = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/search/`, {\n                        method: \"POST\",\n                        body: JSON.stringify(this.state.parsedPlants[i].data.id),\n                        credentials: 'include',\n                        headers: {\n                        'Content-Type': 'application/json'}\n                     })\n                    console.log(quedPlants)\n                    await this.setState({\n                         plants: [...this.state.plants, quedPlants]\n                    })\n                    console.log(this.state.plants)\n                }\n            }\n\n\n\n        } catch(err){\n            // console.log(err)\n            this.props.history.push('/')\n        }\n    }\n    removePlant = async (id) => {\n        const deletePlantResponse = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/${id}/`, {\n            method: 'DELETE',\n            credentials: 'include'\n        })\n        const deletePlantParsed = await deletePlantResponse.json()\n        this.setState({plants: this.state.plants.filter((plants) => plants.id !== id )})\n    }\n    openPlantModal = async (plant) => {\n        await this.setState({\n            viewPlants: true,\n            plantViewed: plant\n        })\n    }\n    closeModal = async () => {\n        await this.setState({\n            viewPlant: false\n        })\n    }\n    render(){\n        return(\n            <Fragment>\n                <NavBar />\n                <SillsList searchedPlant={this.state.plants} removePlant={this.removePlant}/>\n            </Fragment>\n        )\n    }\n}\n\nexport default Sills;"]},"metadata":{},"sourceType":"module"}