{"ast":null,"code":"var _jsxFileName = \"/Users/jordanbruner/Desktop/Projects/EmptySillsFrontEnd/src/Sills/index.js\";\nimport React, { Component, Fragment } from 'react'; //import {Button} from 'semantic-ui-react'\n\nimport { Link } from 'react-router-dom';\nimport NavBar from '../Nav';\nimport PlantModule from '../PlantModule';\nimport SillsList from '../SillsList';\n\nclass Sills extends Component {\n  constructor() {\n    super();\n\n    this.getUser = async () => {\n      try {\n        const userId = localStorage.getItem('sessionUserId');\n        let parsedUser = null; // const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n        //     credentials: 'include',\n        //     method: \"GET\"\n        // })\n        //const parsedUser = await user.json()\n\n        if (userId) {\n          parsedUser = JSON.parse(localStorage.getItem('currentUser'));\n        }\n\n        if (!parsedUser) {\n          this.props.history.push('/');\n        }\n      } catch (err) {\n        this.props.history.push('/');\n      }\n    };\n\n    this.currentPlants = async () => {\n      try {\n        await this.setState({\n          plantData: [],\n          plants: []\n        });\n        const searchedPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/`, {\n          method: \"GET\",\n          credentials: 'include'\n        });\n        console.log(searchedPlant, \"1\");\n        const parsedPlants = await searchedPlant.json();\n        console.log(parsedPlants.data, \"2\");\n        console.log(this.state.plants, \"3\");\n        console.log(parsedPlants.data.length);\n\n        for (let i = 0; i < parsedPlants.data.length; i++) {\n          console.log(parsedPlants.data[i], \"4\");\n          console.log(parsedPlants.data[i].user.id, \"5\");\n\n          if (parsedPlants.data[i].user.id.toString() === localStorage.getItem('sessionUserId').toString()) {\n            console.log(\"6\");\n            await this.setState({\n              plantData: [...this.state.plantData, parsedPlants.data[i]]\n            });\n            console.log(this.state.plantData, '7');\n            console.log(this.state.plantData[i], \"8\");\n            console.log(this.state.plantData[i].plant_id, \"9\"); //console.log(this.state.parsedPlants.data[i], \"8\")\n\n            const quedPlants = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/sill/`, {\n              method: \"POST\",\n              body: JSON.stringify(this.state.plantData[i].plant_id),\n              credentials: 'include',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            const allPlantData = await quedPlants.json();\n            console.log(quedPlants);\n            await this.setState({\n              plants: [...this.state.plants, allPlantData]\n            });\n            console.log(this.state.plants);\n            console.log(this.state.plantData);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n        this.props.history.push('/');\n      }\n    };\n\n    this.removePlant = async id => {\n      const deletePlantResponse = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/${id}/`, {\n        method: 'DELETE',\n        credentials: 'include'\n      });\n      const deletePlantParsed = await deletePlantResponse.json();\n      this.setState({\n        plants: this.state.plants.filter(plants => plants.id !== id)\n      });\n    };\n\n    this.waterPlant = async plantWatered => {\n      try {\n        console.log(plantWatered);\n        const editResponce = await fetch(process.env.REACT_APP_API_URL + `/api/v1/plants/${plantWatered}/`, {\n          method: 'PUT',\n          credentials: \"include\"\n        });\n        const editResponseParsed = await editResponce.json();\n        console.log('editResponseParsed: ', editResponseParsed);\n        const plantArr = this.state.plantData.map(plant => {\n          if (plant.id === editResponseParsed.data.id) {\n            plant = editResponseParsed.data;\n          }\n\n          return plant;\n        });\n        this.setState({\n          plantData: plantArr\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      plants: [],\n      plantData: [],\n      viewPlants: false,\n      companionViewed: [],\n      editPlant: []\n    };\n  }\n\n  componentDidMount() {\n    this.getUser();\n    this.currentPlants();\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(SillsList, {\n      searchedPlant: this.state.plants,\n      plantId: this.state.plantData,\n      waterPlant: this.waterPlant,\n      removePlant: this.removePlant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Sills;","map":{"version":3,"sources":["/Users/jordanbruner/Desktop/Projects/EmptySillsFrontEnd/src/Sills/index.js"],"names":["React","Component","Fragment","Link","NavBar","PlantModule","SillsList","Sills","constructor","getUser","userId","localStorage","getItem","parsedUser","JSON","parse","props","history","push","err","currentPlants","setState","plantData","plants","searchedPlant","fetch","process","env","REACT_APP_API_URL","method","credentials","console","log","parsedPlants","json","data","state","length","i","user","id","toString","plant_id","quedPlants","body","stringify","headers","allPlantData","removePlant","deletePlantResponse","deletePlantParsed","filter","waterPlant","plantWatered","editResponce","editResponseParsed","plantArr","map","plant","viewPlants","companionViewed","editPlant","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\n//import {Button} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport NavBar from '../Nav';\nimport PlantModule from '../PlantModule';\nimport SillsList from '../SillsList'\n\nclass Sills extends Component{\n    constructor(){\n        super();\n        this.state = {\n            plants: [],\n            plantData: [],\n            viewPlants: false,\n            companionViewed: [],\n            editPlant: []\n        }\n    }\n    componentDidMount(){\n        this.getUser();\n        this.currentPlants();\n    }\n    getUser = async () => {\n        try{\n            const userId = localStorage.getItem('sessionUserId');\n            let parsedUser = null\n\n            // const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n            //     credentials: 'include',\n            //     method: \"GET\"\n            // })\n\n           //const parsedUser = await user.json()\n            if (userId) {\n                parsedUser = JSON.parse(localStorage.getItem('currentUser'));\n           } \n\n            if (!parsedUser) {\n                this.props.history.push('/')\n            }\n\n\n        } catch(err){\n            this.props.history.push('/')\n        }\n    }\n    currentPlants = async () => {\n        try{\n            await this.setState({\n                plantData: [],\n                plants: []\n            })\n            const searchedPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/`, {\n                method: \"GET\",\n                credentials: 'include'\n            });\n            console.log(searchedPlant, \"1\")\n            const parsedPlants = await searchedPlant.json()\n            console.log(parsedPlants.data, \"2\")\n            console.log(this.state.plants, \"3\")\n            console.log(parsedPlants.data.length)\n                for(let i=0; i<parsedPlants.data.length; i++){\n                    console.log(parsedPlants.data[i],\"4\")\n                    console.log(parsedPlants.data[i].user.id, \"5\")\n                    if(parsedPlants.data[i].user.id.toString() === localStorage.getItem('sessionUserId').toString()){\n                        console.log(\"6\")\n                        await this.setState({\n                            plantData: [...this.state.plantData, parsedPlants.data[i]]\n                        })\n                            console.log(this.state.plantData, '7')\n                            console.log(this.state.plantData[i],\"8\")\n                            console.log(this.state.plantData[i].plant_id,\"9\")\n                            //console.log(this.state.parsedPlants.data[i], \"8\")\n                        const quedPlants = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/sill/`, {\n                            method: \"POST\",\n                            body: JSON.stringify(this.state.plantData[i].plant_id),\n                            credentials: 'include',\n                            headers: {\n                            'Content-Type': 'application/json'}\n                         })\n                        const allPlantData = await quedPlants.json()\n                        console.log(quedPlants)\n                        await this.setState({\n                             plants: [...this.state.plants, allPlantData]\n                        })\n                        console.log(this.state.plants)\n                        console.log(this.state.plantData)\n                    }\n                }\n\n\n\n        } catch(err){\n            console.log(err)\n            this.props.history.push('/')\n        }\n    }\n    removePlant = async (id) => {\n        const deletePlantResponse = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/${id}/`, {\n            method: 'DELETE',\n            credentials: 'include'\n        })\n        const deletePlantParsed = await deletePlantResponse.json()\n        this.setState({plants: this.state.plants.filter((plants) => plants.id !== id )})\n    }\n    // openPlantModal = async (plant) => {\n    //     await this.setState({\n    //         viewPlants: true,\n    //         plantViewed: plant\n    //     })\n    // }\n    // closeModal = async () => {\n    //     await this.setState({\n    //         viewPlant: false\n    //     })\n    // }\n    waterPlant = async(plantWatered) => {\n         try {\n\n            console.log(plantWatered)\n\n             const editResponce = await fetch (process.env.REACT_APP_API_URL + `/api/v1/plants/${plantWatered}/`, {\n             method: 'PUT',\n             credentials: \"include\"\n          });\n\n          const editResponseParsed = await editResponce.json();\n          console.log('editResponseParsed: ', editResponseParsed)\n\n\n          const plantArr = this.state.plantData.map((plant) => {\n            if(plant.id === editResponseParsed.data.id) {\n              plant = editResponseParsed.data\n            }\n            return plant;\n          })\n\n          this.setState({\n            plantData: plantArr\n          })\n\n        } catch (err) {\n          console.log(err);\n        }\n    }\n    render(){\n        return(\n            <Fragment>\n                <NavBar />\n                <SillsList searchedPlant={this.state.plants} plantId={this.state.plantData} waterPlant={this.waterPlant} removePlant={this.removePlant}/>\n            </Fragment>\n        )\n    }\n}\n\nexport default Sills;"]},"metadata":{},"sourceType":"module"}