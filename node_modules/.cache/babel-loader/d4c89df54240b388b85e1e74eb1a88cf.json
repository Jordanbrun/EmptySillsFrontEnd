{"ast":null,"code":"var _jsxFileName = \"/Users/jordanbruner/Desktop/Projects/EmptyStillsFront/emptysills/src/SearchBar/index.js\";\nimport React, { Component } from 'react';\nimport { Button, Input, Segment, Container, Divider } from 'semantic-ui-react';\nimport NavBar from '../Nav';\nimport axios from 'axios';\nimport PlantList from '../PlantList';\n\nclass Search extends Component {\n  constructor() {\n    super();\n\n    this.getUser = async () => {\n      try {\n        // console.log(\"get user function\");\n        const userId = localStorage.getItem('sessionUserId'); // console.log(userId);\n\n        const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n          credentials: 'include',\n          method: \"GET\"\n        });\n        const parsedUser = await user.json();\n        console.log(\"currentUser:\", parsedUser);\n        this.setState({\n          currentUser: parsedUser\n        });\n      } catch (err) {\n        console.log(err);\n        this.props.history.push('/');\n      }\n    };\n\n    this.searchButton = async () => {\n      try {\n        this.setState({\n          plants: []\n        });\n        const searchPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/search/`, {\n          method: \"POST\",\n          body: JSON.stringify(this.state),\n          credentials: 'include',\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n          }\n        });\n        const parsedPlant = await searchPlant.json();\n        console.log(parsedPlant);\n\n        for (let i = 0; i < parsedPlant.length; i++) {\n          this.setState({\n            plants: [...this.state.plants, parsedPlant[i]]\n          });\n        } // this.setState({\n        //     plants: [parsedPlant]\n        // })\n\n      } catch (err) {\n        console.log(err, \"error in searchBar\");\n      }\n    };\n\n    this.updateValue = e => {\n      this.setState({\n        [e.currentTarget.name]: e.currentTarget.value\n      });\n    };\n\n    this.addPlant = async id => {\n      try {\n        console.log(id);\n        await this.setState({\n          plant_id: id\n        });\n        console.log(this.state.plant_id);\n        const plantUrl = `${process.env.REACT_APP_API_URL}/api/v1/plants/`;\n        const plantResponce = await fetch(plantUrl, {\n          method: \"POST\",\n          credentials: 'include',\n          body: JSON.stringify(this.state.submitPlant),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(this.state.plant_id);\n        this.setState({\n          plant_id: 0\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      currentUser: [],\n      plants: [],\n      userInput: \"\",\n      submitPlant: {\n        plant_id: 0,\n        user: 0\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Container, {\n      text: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Input, {\n      icon: \"leaf\",\n      onChange: this.updateValue,\n      name: \"userInput\",\n      iconPosition: \"left\",\n      value: this.state.userInput,\n      placeholder: \"Search plants...\",\n      centered: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"green\",\n      onClick: this.searchButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Search\"), React.createElement(Divider, {\n      hidden: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(PlantList, {\n      searchedPlant: this.state.plants,\n      addPlant: this.addPlant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Search; //  <input\n//type=\"text\"\n//value={this.state.userInput}\n//onChange={this.updateValue}\n// />","map":{"version":3,"sources":["/Users/jordanbruner/Desktop/Projects/EmptyStillsFront/emptysills/src/SearchBar/index.js"],"names":["React","Component","Button","Input","Segment","Container","Divider","NavBar","axios","PlantList","Search","constructor","getUser","userId","localStorage","getItem","user","fetch","process","env","REACT_APP_API_URL","credentials","method","parsedUser","json","console","log","setState","currentUser","err","props","history","push","searchButton","plants","searchPlant","body","JSON","stringify","state","headers","parsedPlant","i","length","updateValue","e","currentTarget","name","value","addPlant","id","plant_id","plantUrl","plantResponce","submitPlant","userInput","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Button, Input, Segment, Container, Divider } from 'semantic-ui-react'\nimport NavBar from '../Nav';\nimport axios from 'axios'\nimport PlantList from '../PlantList'\n\nclass Search extends Component{\n    constructor(){\n        super();\n        this.state = {\n            currentUser: [],\n            plants: [],\n            userInput:\"\",\n            submitPlant: {\n                plant_id: 0,\n                user: 0\n            }\n        }\n    }\n    componentDidMount(){\n        this.getUser();\n    }\n    getUser = async () => {\n        try{\n            // console.log(\"get user function\");\n            const userId = localStorage.getItem('sessionUserId');\n            // console.log(userId);\n            const user = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/users/${userId}`, {\n                credentials: 'include',\n                method: \"GET\"\n            })\n\n            const parsedUser = await user.json()\n             console.log(\"currentUser:\", parsedUser);\n            this.setState({\n                currentUser: parsedUser\n            })\n\n        } catch(err){\n            console.log(err);\n            this.props.history.push('/')\n        }\n    }\n    searchButton = async () => {\n        try {\n            this.setState({\n                plants: []\n            })\n\n            const searchPlant = await fetch(`${process.env.REACT_APP_API_URL}/api/v1/plants/search/`, {\n            method: \"POST\",\n            body: JSON.stringify(this.state),\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*' }\n            })\n            const parsedPlant = await searchPlant.json();\n            console.log(parsedPlant);\n\n            for(let i=0; i<parsedPlant.length; i++){\n            this.setState({\n            plants: [...this.state.plants, parsedPlant[i]]\n                })\n            }\n\n            // this.setState({\n            //     plants: [parsedPlant]\n            // })\n        } catch(err){\n            console.log(err, \"error in searchBar\")\n        }\n    }\n    updateValue = (e) => {\n            this.setState({\n            [e.currentTarget.name]: e.currentTarget.value\n        })\n    }\n    addPlant = async (id) => {\n        try {\n            console.log(id)\n                await this.setState({\n                    plant_id: id,\n                })\n            console.log(this.state.plant_id)\n            const plantUrl = `${process.env.REACT_APP_API_URL}/api/v1/plants/`;\n            const plantResponce = await fetch(plantUrl, {\n                method: \"POST\",\n                credentials: 'include',\n                body: JSON.stringify(this.state.submitPlant),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log(this.state.plant_id)\n            this.setState({\n                plant_id: 0\n            })\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    render(){\n        return(\n            <React.Fragment>\n            <NavBar/>\n            <Container text>\n                    <Input icon='leaf' onChange={this.updateValue} name=\"userInput\" iconPosition='left' value={this.state.userInput} placeholder='Search plants...' centered='true' />\n                    <Button color=\"green\" onClick={this.searchButton}>Search</Button>\n                    <Divider hidden='true'/>\n                    <PlantList searchedPlant={this.state.plants} addPlant={this.addPlant}/>\n            </Container>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Search;\n\n//  <input\n                    //type=\"text\"\n                    //value={this.state.userInput}\n                    //onChange={this.updateValue}\n                 // />"]},"metadata":{},"sourceType":"module"}