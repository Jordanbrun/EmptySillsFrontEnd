{"ast":null,"code":"var _jsxFileName = \"/Users/jordanbruner/Desktop/Projects/EmptyStillsFront/emptysills/src/PlantList/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport NavBar from '../Nav';\nimport { Button, Card, Container, Image, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nfunction PlantList(props) {\n  const mappedPlants = props.searchedPlant.map(plant => {\n    return React.createElement(Card, {\n      key: plant.id,\n      color: \"black\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, plant.images === undefined || plant.images === null || plant.images[0] === null || plant.images[0] === undefined || plant.images[0].url === undefined ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"No Available Image\") : React.createElement(Image, {\n      src: plant.images[0].url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      name: \"leaf\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }), \" \", plant.common_name), React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, plant.scientific_name), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, plant.family_common_name), React.createElement(Button, {\n      color: \"green\",\n      onClick: () => props.addPlant(plant.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Add Plant to Sill\")));\n  });\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Card.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, mappedPlants));\n}\n\nfunction MealList(props) {\n  console.log(props.meals, \"meal props\");\n  console.log(props.foodItems, \"foodItem props\");\n  const meals = props.meals.map(meal => {\n    //Only meals that were created on the current day \"see state in main container\" will be displayed.\n    //Only food_items that are linked to the appropraite meal will be displayed. \n    if (meal.date_created === props.date) {\n      const foodItems = props.foodItems.map((foodItem, i) => {\n        if (meal.id === foodItem.meal.id) {\n          return React.createElement(\"li\", {\n            className: \"foodList\",\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42\n            },\n            __self: this\n          }, React.createElement(Icon, {\n            name: \"food\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          }), foodItem.food_name, \" (\", foodItem.food_calories, \" Cal)\");\n        }\n      });\n      return React.createElement(Grid.Column, {\n        className: \"mealList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"mealListItem\",\n        key: meal.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Card.Content, {\n        className: \"mealListDescription\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"For \", meal.meal_type, \", you ate:\"), React.createElement(Card.Description, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, foodItems), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), \"For a total of \", meal.calories, \" calories.\")), React.createElement(Card.Content, {\n        extra: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"green\",\n        floated: \"left\",\n        className: \"listButton\",\n        size: \"small\",\n        onClick: () => props.openAndEdit(meal, props.foodItems),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Edit Meal\"), React.createElement(Button, {\n        color: \"green\",\n        floated: \"right\",\n        className: \"listButton\",\n        size: \"small\",\n        onClick: () => props.deleteMeal(meal.id, props.foodItems),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Delete Meal\"))));\n    }\n  });\n  return React.createElement(Card.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, meals);\n}","map":{"version":3,"sources":["/Users/jordanbruner/Desktop/Projects/EmptyStillsFront/emptysills/src/PlantList/index.js"],"names":["React","Component","Fragment","NavBar","Button","Card","Container","Image","Icon","Link","PlantList","props","mappedPlants","searchedPlant","map","plant","id","images","undefined","url","common_name","scientific_name","family_common_name","addPlant","MealList","console","log","meals","foodItems","meal","date_created","date","foodItem","i","food_name","food_calories","meal_type","calories","openAndEdit","deleteMeal"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport NavBar from '../Nav';\nimport {Button, Card, Container,Image, Icon} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\n\nfunction PlantList(props){\n    const mappedPlants = props.searchedPlant.map((plant) => {\n        return(\n            <Card key={plant.id} color='black'>\n                <Card.Header>\n                {\n                    (plant.images === undefined || plant.images === null || plant.images[0] === null || plant.images[0] === undefined || plant.images[0].url === undefined ) ? <div>No Available Image</div> : <Image src={plant.images[0].url}/>\n                }\n                <Icon name='leaf'/> {plant.common_name}</Card.Header>\n                <Card.Content>\n                    <Card.Description>{plant.scientific_name}</Card.Description>\n                    <Card.Description>{plant.family_common_name}</Card.Description>\n                    <Button color='green' onClick={() => props.addPlant(plant.id)}>Add Plant to Sill</Button>\n                </Card.Content>\n            </Card>\n        )\n    })\n    return(\n        <Container>\n        <Card.Group>\n            {mappedPlants}\n        </Card.Group>\n        </Container>\n    )\n}\n\nfunction MealList(props){\n    console.log(props.meals, \"meal props\")\n    console.log(props.foodItems, \"foodItem props\")\n    const meals = props.meals.map((meal) => {\n        //Only meals that were created on the current day \"see state in main container\" will be displayed.\n        //Only food_items that are linked to the appropraite meal will be displayed. \n        if(meal.date_created === props.date){\n            const foodItems = props.foodItems.map((foodItem, i) =>{\n                if(meal.id === foodItem.meal.id){\n                    return(\n                        <li className='foodList' key={i}>\n                            <Icon name='food'/>{foodItem.food_name} ({foodItem.food_calories} Cal)\n                        </li>\n                    )\n                }\n            });\n            return (\n                <Grid.Column className='mealList'>\n                    <Card className='mealListItem' key={meal.id}>\n                        <Card.Content className='mealListDescription'>\n                            <Card.Header>For {meal.meal_type}, you ate:</Card.Header>\n                            <Card.Description>\n                            <ul>\n                                { foodItems }\n                            </ul><br/>\n                            For a total of {meal.calories} calories. \n                            </Card.Description>\n                        </Card.Content>\n                        <Card.Content extra>\n                            <Button color='green' floated='left' className='listButton' size='small' onClick={() => props.openAndEdit(meal, props.foodItems)}>Edit Meal</Button>\n                            <Button color='green' floated='right' className='listButton' size='small' onClick={() => props.deleteMeal(meal.id, props.foodItems)}>Delete Meal</Button>\n                        </Card.Content>\n                    </Card>\n                </Grid.Column>\n            )\n        }\n    })\n    return(\n        <Card.Group>\n            { meals }\n        </Card.Group>\n    )\n}"]},"metadata":{},"sourceType":"module"}